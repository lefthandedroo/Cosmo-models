#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Nov 19 18:06:28 2018

@author: usyd
"""
import pickle
import numpy as np
import matplotlib.pyplot as plt
import datasim

## Pantheon data:
#import pandas as pd
#pantheon = pd.read_csv('./data/lcparam_full_long.txt', sep=" ")
## Stacking arrays together and sorting by accending redshift.
#data = np.stack((pantheon.mb.values,pantheon.zhel.values), axis=0)
#data.sort(axis=-1)
#pmag = data[0]
#zpicks = data[-1]
#data_dic = {'zpicks':zpicks}
## Pantheon data plot.
#plt.figure()
#plt.title('Pantheon')
#plt.ylabel('Mag')
#plt.xlabel('redshift')
#plt.scatter(zpicks, pmag, marker=',', s=1)

# Generating redshifts.
zpicks = np.random.uniform(low=0.0001, high=1088, size=(1000,))
zpicks[-1] = 1089
zpicks = np.sort(zpicks, axis=None)
zpicks = np.array([3.77591198e-01, 1.33052227e+00, 1.41211330e+00, 2.68031016e+00,
       3.01667457e+00, 3.63675791e+00, 5.90722702e+00, 6.30917924e+00,
       7.36105452e+00, 7.41200861e+00, 8.04289805e+00, 9.31658664e+00,
       1.11395467e+01, 1.27673936e+01, 1.72713649e+01, 1.95393227e+01,
       1.96983326e+01, 2.04857628e+01, 2.08281197e+01, 2.08817880e+01,
       2.30261902e+01, 2.58852409e+01, 2.89962806e+01, 2.90001821e+01,
       3.04256336e+01, 3.30297096e+01, 3.30816789e+01, 3.33143219e+01,
       3.35852668e+01, 3.42262651e+01, 3.69458112e+01, 3.70801439e+01,
       3.90939354e+01, 4.07737819e+01, 4.12864358e+01, 4.17088633e+01,
       4.43603075e+01, 4.60499290e+01, 4.70193483e+01, 4.85895983e+01,
       5.09145132e+01, 5.10198295e+01, 5.10260430e+01, 5.10818683e+01,
       5.19589569e+01, 5.25563719e+01, 5.28268304e+01, 5.37092120e+01,
       5.38902122e+01, 5.53994936e+01, 5.62855004e+01, 5.72897075e+01,
       5.74998538e+01, 5.82225642e+01, 5.87688228e+01, 5.97149882e+01,
       6.01164162e+01, 6.07182913e+01, 6.16444854e+01, 6.17058122e+01,
       6.30270975e+01, 6.63178430e+01, 6.63187782e+01, 6.74762502e+01,
       7.11271738e+01, 7.13716642e+01, 7.37145602e+01, 7.38071929e+01,
       7.57304981e+01, 7.63447489e+01, 7.75288903e+01, 7.99795879e+01,
       8.02681540e+01, 8.06937193e+01, 8.21680314e+01, 8.64110006e+01,
       8.65363076e+01, 8.91768988e+01, 8.98818838e+01, 9.03119543e+01,
       9.09202607e+01, 9.10091383e+01, 9.13898781e+01, 9.19723442e+01,
       9.23859765e+01, 9.26534307e+01, 9.33534646e+01, 9.62153667e+01,
       9.72999113e+01, 9.84273667e+01, 1.01515137e+02, 1.01664224e+02,
       1.02929777e+02, 1.05852752e+02, 1.06840404e+02, 1.06936347e+02,
       1.08058231e+02, 1.08179309e+02, 1.09441176e+02, 1.10921213e+02,
       1.11048412e+02, 1.12510955e+02, 1.12518182e+02, 1.16704726e+02,
       1.17096620e+02, 1.17575866e+02, 1.17849724e+02, 1.21746792e+02,
       1.22626287e+02, 1.23693901e+02, 1.23860435e+02, 1.27093841e+02,
       1.28399649e+02, 1.28424015e+02, 1.28778092e+02, 1.29205460e+02,
       1.29714589e+02, 1.31479456e+02, 1.36984446e+02, 1.37890395e+02,
       1.39007809e+02, 1.39947414e+02, 1.40033037e+02, 1.40709929e+02,
       1.41341707e+02, 1.42140604e+02, 1.43530162e+02, 1.44691026e+02,
       1.44838709e+02, 1.45961306e+02, 1.46976612e+02, 1.48397335e+02,
       1.48671717e+02, 1.49509763e+02, 1.49974035e+02, 1.50140991e+02,
       1.52206546e+02, 1.52405660e+02, 1.53525246e+02, 1.54923232e+02,
       1.54939957e+02, 1.56095084e+02, 1.56387184e+02, 1.57286164e+02,
       1.58636563e+02, 1.59475839e+02, 1.61534487e+02, 1.62846217e+02,
       1.64314176e+02, 1.64799130e+02, 1.65331842e+02, 1.65792801e+02,
       1.66209248e+02, 1.66297008e+02, 1.66345414e+02, 1.66412004e+02,
       1.68474610e+02, 1.70358474e+02, 1.70619649e+02, 1.70878987e+02,
       1.71447122e+02, 1.71803622e+02, 1.75875828e+02, 1.77114140e+02,
       1.77647727e+02, 1.79167779e+02, 1.79589413e+02, 1.80389548e+02,
       1.80585628e+02, 1.86404068e+02, 1.87650716e+02, 1.87686366e+02,
       1.90365294e+02, 1.91212600e+02, 1.92289551e+02, 1.92649197e+02,
       1.98365021e+02, 1.98730601e+02, 1.99532967e+02, 2.01339579e+02,
       2.01610328e+02, 2.02235392e+02, 2.02813856e+02, 2.03046311e+02,
       2.07788767e+02, 2.12593131e+02, 2.12978961e+02, 2.13736027e+02,
       2.13855420e+02, 2.15312340e+02, 2.16901679e+02, 2.17060279e+02,
       2.17695919e+02, 2.17718553e+02, 2.19417505e+02, 2.19516101e+02,
       2.21286141e+02, 2.22023084e+02, 2.22692322e+02, 2.23514843e+02,
       2.24862508e+02, 2.26224130e+02, 2.26531767e+02, 2.26995529e+02,
       2.27048903e+02, 2.28477487e+02, 2.29189857e+02, 2.31755676e+02,
       2.31795404e+02, 2.32407838e+02, 2.32616937e+02, 2.35588110e+02,
       2.35697522e+02, 2.36121368e+02, 2.36514446e+02, 2.37637931e+02,
       2.38238413e+02, 2.38959313e+02, 2.39238736e+02, 2.40237419e+02,
       2.42327899e+02, 2.42625879e+02, 2.42905732e+02, 2.43722419e+02,
       2.44161066e+02, 2.44727408e+02, 2.46294575e+02, 2.47416090e+02,
       2.51328767e+02, 2.52905148e+02, 2.53896394e+02, 2.54089802e+02,
       2.54588081e+02, 2.54832644e+02, 2.55771209e+02, 2.59478870e+02,
       2.59641586e+02, 2.59898707e+02, 2.60440019e+02, 2.60695707e+02,
       2.63523675e+02, 2.63849214e+02, 2.65080968e+02, 2.65155601e+02,
       2.66936592e+02, 2.67524903e+02, 2.67535705e+02, 2.68252136e+02,
       2.69873897e+02, 2.69965450e+02, 2.70347233e+02, 2.71736316e+02,
       2.72682079e+02, 2.73441530e+02, 2.73858457e+02, 2.74385286e+02,
       2.74807716e+02, 2.75371265e+02, 2.75802057e+02, 2.77165571e+02,
       2.78356289e+02, 2.78444099e+02, 2.78838188e+02, 2.78991939e+02,
       2.80413727e+02, 2.81581820e+02, 2.82381038e+02, 2.83715129e+02,
       2.84151157e+02, 2.84969318e+02, 2.85053894e+02, 2.85103226e+02,
       2.85499602e+02, 2.85811314e+02, 2.87315965e+02, 2.89198497e+02,
       2.90204611e+02, 2.90226481e+02, 2.91504744e+02, 2.91658475e+02,
       2.91835338e+02, 2.92885049e+02, 2.93092341e+02, 2.93335759e+02,
       2.94339368e+02, 2.98413280e+02, 2.99399156e+02, 3.02109286e+02,
       3.03429617e+02, 3.03928401e+02, 3.05575158e+02, 3.05982508e+02,
       3.06416199e+02, 3.07190358e+02, 3.07340403e+02, 3.07426095e+02,
       3.08631247e+02, 3.08801245e+02, 3.08990741e+02, 3.09364793e+02,
       3.12291671e+02, 3.13675061e+02, 3.15080209e+02, 3.16923481e+02,
       3.17287149e+02, 3.18021310e+02, 3.18370041e+02, 3.18759886e+02,
       3.19662040e+02, 3.20181677e+02, 3.20729538e+02, 3.23138623e+02,
       3.27300625e+02, 3.27423813e+02, 3.27504135e+02, 3.30700847e+02,
       3.31905103e+02, 3.32126331e+02, 3.33938973e+02, 3.35490012e+02,
       3.36107740e+02, 3.37086296e+02, 3.39676629e+02, 3.42644030e+02,
       3.43186765e+02, 3.43248425e+02, 3.44073429e+02, 3.46555726e+02,
       3.46595987e+02, 3.47515774e+02, 3.48029545e+02, 3.48186696e+02,
       3.50874184e+02, 3.51589175e+02, 3.51595261e+02, 3.52691640e+02,
       3.52845836e+02, 3.54688287e+02, 3.57128624e+02, 3.57384802e+02,
       3.59441726e+02, 3.60180894e+02, 3.60485869e+02, 3.60721237e+02,
       3.60804364e+02, 3.61713055e+02, 3.63637038e+02, 3.64681022e+02,
       3.67813735e+02, 3.67876093e+02, 3.67954985e+02, 3.68966236e+02,
       3.75083783e+02, 3.75791198e+02, 3.78625584e+02, 3.78944044e+02,
       3.81361621e+02, 3.82040644e+02, 3.88451873e+02, 3.89619278e+02,
       3.89840187e+02, 3.92328831e+02, 3.93306719e+02, 3.93829348e+02,
       3.94271407e+02, 3.94892082e+02, 3.96655794e+02, 3.97939771e+02,
       3.99622954e+02, 4.01626382e+02, 4.02017163e+02, 4.03706905e+02,
       4.04308046e+02, 4.05151383e+02, 4.05202086e+02, 4.05368326e+02,
       4.06434579e+02, 4.06470575e+02, 4.07206209e+02, 4.08190943e+02,
       4.08960270e+02, 4.09146151e+02, 4.11716029e+02, 4.13957761e+02,
       4.14480188e+02, 4.16962679e+02, 4.17763247e+02, 4.18102399e+02,
       4.21488878e+02, 4.22226109e+02, 4.23729311e+02, 4.23899070e+02,
       4.23978875e+02, 4.27211592e+02, 4.27376569e+02, 4.27882319e+02,
       4.29374594e+02, 4.30010705e+02, 4.30126755e+02, 4.30457898e+02,
       4.31394694e+02, 4.32035506e+02, 4.35760147e+02, 4.36225207e+02,
       4.36758969e+02, 4.36972573e+02, 4.37204262e+02, 4.38884891e+02,
       4.40821592e+02, 4.40831319e+02, 4.42036946e+02, 4.42535682e+02,
       4.45547137e+02, 4.45883599e+02, 4.47671845e+02, 4.49082223e+02,
       4.50969128e+02, 4.51594296e+02, 4.51748581e+02, 4.52280844e+02,
       4.52557182e+02, 4.52984623e+02, 4.53586235e+02, 4.54639323e+02,
       4.54746841e+02, 4.54845335e+02, 4.54916647e+02, 4.56891767e+02,
       4.57347307e+02, 4.58238215e+02, 4.59382588e+02, 4.59582772e+02,
       4.60762094e+02, 4.60790887e+02, 4.61163983e+02, 4.63188000e+02,
       4.67075719e+02, 4.70314827e+02, 4.70927646e+02, 4.71482395e+02,
       4.71951246e+02, 4.73254863e+02, 4.74524007e+02, 4.75153620e+02,
       4.75325045e+02, 4.76818930e+02, 4.77734952e+02, 4.77929676e+02,
       4.80097029e+02, 4.81889588e+02, 4.82542939e+02, 4.84278552e+02,
       4.86462102e+02, 4.88332594e+02, 4.90882220e+02, 4.92513733e+02,
       4.95271908e+02, 4.95703263e+02, 4.96807221e+02, 4.98316785e+02,
       4.99675527e+02, 5.00086388e+02, 5.00394792e+02, 5.00500942e+02,
       5.00875294e+02, 5.01141447e+02, 5.02522103e+02, 5.03095807e+02,
       5.03903009e+02, 5.04933835e+02, 5.05192681e+02, 5.06009105e+02,
       5.06729825e+02, 5.09967723e+02, 5.10857917e+02, 5.11433012e+02,
       5.12132817e+02, 5.12998491e+02, 5.14603980e+02, 5.14610852e+02,
       5.15308396e+02, 5.16218949e+02, 5.17851263e+02, 5.18322617e+02,
       5.18893857e+02, 5.19452660e+02, 5.21612906e+02, 5.22585976e+02,
       5.23877799e+02, 5.25136619e+02, 5.27300002e+02, 5.27621228e+02,
       5.29165324e+02, 5.29369288e+02, 5.29444134e+02, 5.30390456e+02,
       5.32621358e+02, 5.34395881e+02, 5.34596159e+02, 5.34647053e+02,
       5.35207380e+02, 5.39587991e+02, 5.39913464e+02, 5.44132451e+02,
       5.45399231e+02, 5.46455475e+02, 5.47241788e+02, 5.48035604e+02,
       5.48134811e+02, 5.48273398e+02, 5.50651502e+02, 5.54043814e+02,
       5.54799191e+02, 5.57397840e+02, 5.58013984e+02, 5.58968725e+02,
       5.61334477e+02, 5.63999343e+02, 5.64032321e+02, 5.64138902e+02,
       5.64291967e+02, 5.65014013e+02, 5.65052192e+02, 5.65908422e+02,
       5.69468576e+02, 5.70637500e+02, 5.73529456e+02, 5.73998861e+02,
       5.74924692e+02, 5.75937140e+02, 5.75940744e+02, 5.76592813e+02,
       5.76820112e+02, 5.77577006e+02, 5.78164488e+02, 5.78359414e+02,
       5.79970511e+02, 5.80300975e+02, 5.82051816e+02, 5.82387721e+02,
       5.82524437e+02, 5.82559834e+02, 5.83223180e+02, 5.85889302e+02,
       5.86465476e+02, 5.86527237e+02, 5.87010127e+02, 5.89412560e+02,
       5.90627062e+02, 5.92441708e+02, 5.92567450e+02, 5.92731443e+02,
       5.94565140e+02, 5.94752362e+02, 5.95679715e+02, 5.98859531e+02,
       6.00308907e+02, 6.00916741e+02, 6.01223603e+02, 6.01348988e+02,
       6.01529414e+02, 6.02425892e+02, 6.02603703e+02, 6.02970120e+02,
       6.03571445e+02, 6.03890068e+02, 6.06229089e+02, 6.07130881e+02,
       6.09490469e+02, 6.10012987e+02, 6.11658932e+02, 6.12978409e+02,
       6.13623308e+02, 6.15931627e+02, 6.16414590e+02, 6.16593202e+02,
       6.16861472e+02, 6.18172886e+02, 6.18192413e+02, 6.18246475e+02,
       6.19114712e+02, 6.20713671e+02, 6.20842754e+02, 6.20867546e+02,
       6.21999886e+02, 6.22275160e+02, 6.26472200e+02, 6.26966400e+02,
       6.27288581e+02, 6.27535929e+02, 6.27947076e+02, 6.28320439e+02,
       6.29145567e+02, 6.29770442e+02, 6.30972218e+02, 6.31559049e+02,
       6.31678624e+02, 6.37248218e+02, 6.37530951e+02, 6.38853617e+02,
       6.39367919e+02, 6.39931513e+02, 6.39997533e+02, 6.42150183e+02,
       6.42235083e+02, 6.42914924e+02, 6.43563379e+02, 6.44578637e+02,
       6.44882676e+02, 6.44917386e+02, 6.46237694e+02, 6.47849358e+02,
       6.48982297e+02, 6.51344941e+02, 6.52608103e+02, 6.53331458e+02,
       6.53599743e+02, 6.53816095e+02, 6.55903349e+02, 6.56664272e+02,
       6.56759513e+02, 6.58658543e+02, 6.61067211e+02, 6.61206464e+02,
       6.62309139e+02, 6.62858562e+02, 6.63017576e+02, 6.63929452e+02,
       6.64597427e+02, 6.66075669e+02, 6.66288352e+02, 6.66963369e+02,
       6.68094078e+02, 6.68441990e+02, 6.69507258e+02, 6.69522933e+02,
       6.70769896e+02, 6.71202812e+02, 6.73850967e+02, 6.75700420e+02,
       6.75825309e+02, 6.76944891e+02, 6.77737815e+02, 6.78080567e+02,
       6.78711756e+02, 6.79188739e+02, 6.81656278e+02, 6.82375371e+02,
       6.82891769e+02, 6.83443935e+02, 6.83858974e+02, 6.86896031e+02,
       6.88265547e+02, 6.88705299e+02, 6.89174215e+02, 6.89610195e+02,
       6.90220987e+02, 6.92047990e+02, 6.95564516e+02, 7.00264801e+02,
       7.00757567e+02, 7.02748123e+02, 7.03360816e+02, 7.03721183e+02,
       7.04583496e+02, 7.06657875e+02, 7.08024360e+02, 7.10480765e+02,
       7.11137885e+02, 7.11205406e+02, 7.13062918e+02, 7.13859159e+02,
       7.14026783e+02, 7.16900129e+02, 7.18036139e+02, 7.19208209e+02,
       7.19486076e+02, 7.19750931e+02, 7.21174484e+02, 7.21745326e+02,
       7.22434313e+02, 7.22578635e+02, 7.23363195e+02, 7.23480489e+02,
       7.25162194e+02, 7.25211325e+02, 7.25727054e+02, 7.26061192e+02,
       7.29513541e+02, 7.31291849e+02, 7.31468657e+02, 7.32364109e+02,
       7.32701615e+02, 7.33511705e+02, 7.37100465e+02, 7.37853050e+02,
       7.38454815e+02, 7.39405888e+02, 7.41358841e+02, 7.42215877e+02,
       7.42709093e+02, 7.43575034e+02, 7.45645194e+02, 7.45693010e+02,
       7.46046244e+02, 7.47399968e+02, 7.47409050e+02, 7.47624634e+02,
       7.47903495e+02, 7.48269185e+02, 7.48485379e+02, 7.49767293e+02,
       7.50961581e+02, 7.53077961e+02, 7.55049899e+02, 7.55951216e+02,
       7.58134320e+02, 7.60218277e+02, 7.62116097e+02, 7.63522858e+02,
       7.66137794e+02, 7.67185847e+02, 7.67857046e+02, 7.68800355e+02,
       7.69076203e+02, 7.70252649e+02, 7.70554056e+02, 7.72414838e+02,
       7.73245486e+02, 7.73258390e+02, 7.77865505e+02, 7.78941673e+02,
       7.82026121e+02, 7.83544753e+02, 7.83635202e+02, 7.84333876e+02,
       7.86487859e+02, 7.87199426e+02, 7.88814253e+02, 7.89433961e+02,
       7.89701400e+02, 7.90826851e+02, 7.91048233e+02, 7.93264689e+02,
       7.93503524e+02, 7.94237803e+02, 7.94397286e+02, 7.94995047e+02,
       7.95185265e+02, 7.98226509e+02, 7.98412923e+02, 7.99035410e+02,
       8.00493489e+02, 8.00968824e+02, 8.02087184e+02, 8.03436997e+02,
       8.09926056e+02, 8.09944025e+02, 8.14209813e+02, 8.15597344e+02,
       8.17218205e+02, 8.17320890e+02, 8.18549551e+02, 8.18852476e+02,
       8.20451116e+02, 8.21768754e+02, 8.21885849e+02, 8.23604032e+02,
       8.26550771e+02, 8.30022563e+02, 8.30699500e+02, 8.32152819e+02,
       8.33641484e+02, 8.34452168e+02, 8.34559221e+02, 8.37324845e+02,
       8.37530984e+02, 8.37885994e+02, 8.39047283e+02, 8.39333467e+02,
       8.39453004e+02, 8.39823191e+02, 8.41306229e+02, 8.42707095e+02,
       8.44180244e+02, 8.46239169e+02, 8.47840104e+02, 8.49080222e+02,
       8.49308197e+02, 8.50976498e+02, 8.52335351e+02, 8.52546731e+02,
       8.54239360e+02, 8.54473309e+02, 8.54822079e+02, 8.54895651e+02,
       8.57573921e+02, 8.57893175e+02, 8.57971609e+02, 8.58003086e+02,
       8.58688564e+02, 8.59542923e+02, 8.59929903e+02, 8.60921991e+02,
       8.61993364e+02, 8.62840727e+02, 8.63572151e+02, 8.66108241e+02,
       8.66745158e+02, 8.66909680e+02, 8.67507351e+02, 8.68082723e+02,
       8.68229461e+02, 8.69744362e+02, 8.69934721e+02, 8.70318749e+02,
       8.71674407e+02, 8.72252081e+02, 8.73190286e+02, 8.73863550e+02,
       8.78044577e+02, 8.79476158e+02, 8.79824984e+02, 8.79839475e+02,
       8.80073234e+02, 8.81828482e+02, 8.82863443e+02, 8.83203674e+02,
       8.84072366e+02, 8.88703864e+02, 8.90257496e+02, 8.90559404e+02,
       8.93849315e+02, 8.94134003e+02, 8.96056751e+02, 8.97063619e+02,
       8.98201113e+02, 8.98608942e+02, 9.05561812e+02, 9.08004562e+02,
       9.08484201e+02, 9.10014183e+02, 9.10704955e+02, 9.10911014e+02,
       9.11270642e+02, 9.13159115e+02, 9.13271982e+02, 9.13485353e+02,
       9.13734575e+02, 9.15870482e+02, 9.18755979e+02, 9.19101170e+02,
       9.19536481e+02, 9.23750769e+02, 9.24446978e+02, 9.24787676e+02,
       9.25799246e+02, 9.26169030e+02, 9.28129643e+02, 9.28438450e+02,
       9.28615963e+02, 9.33079491e+02, 9.33683763e+02, 9.34211706e+02,
       9.34649512e+02, 9.36976800e+02, 9.39388078e+02, 9.39711844e+02,
       9.40716196e+02, 9.41537268e+02, 9.42943379e+02, 9.43426935e+02,
       9.43605997e+02, 9.47733149e+02, 9.48121294e+02, 9.48881715e+02,
       9.50280985e+02, 9.51494716e+02, 9.53106856e+02, 9.54713361e+02,
       9.54731939e+02, 9.55070677e+02, 9.57910904e+02, 9.61475848e+02,
       9.62572815e+02, 9.63500883e+02, 9.63688697e+02, 9.64461450e+02,
       9.67735744e+02, 9.67738308e+02, 9.68345641e+02, 9.69248822e+02,
       9.71091486e+02, 9.74902619e+02, 9.75566961e+02, 9.76467691e+02,
       9.76600736e+02, 9.77509503e+02, 9.78196326e+02, 9.78529241e+02,
       9.78684335e+02, 9.79002343e+02, 9.81030769e+02, 9.81191202e+02,
       9.81252429e+02, 9.83084055e+02, 9.87458706e+02, 9.87549903e+02,
       9.88415711e+02, 9.89728730e+02, 9.90853486e+02, 9.92129266e+02,
       9.92523255e+02, 9.92853688e+02, 9.94070664e+02, 9.95461018e+02,
       9.96807949e+02, 9.97755983e+02, 9.99627055e+02, 9.99818958e+02,
       1.00294425e+03, 1.00440711e+03, 1.00572340e+03, 1.00704353e+03,
       1.00760768e+03, 1.00828077e+03, 1.00865317e+03, 1.01037202e+03,
       1.01160471e+03, 1.01308591e+03, 1.01664338e+03, 1.01799616e+03,
       1.01812637e+03, 1.01862848e+03, 1.01935595e+03, 1.02228185e+03,
       1.02373582e+03, 1.02576784e+03, 1.02623675e+03, 1.02631973e+03,
       1.02752943e+03, 1.03024987e+03, 1.03154044e+03, 1.03167480e+03,
       1.03228791e+03, 1.03237628e+03, 1.03247545e+03, 1.03417582e+03,
       1.03453368e+03, 1.03455410e+03, 1.03462465e+03, 1.03499670e+03,
       1.03571000e+03, 1.03585450e+03, 1.03675526e+03, 1.04118586e+03,
       1.04276750e+03, 1.04418433e+03, 1.04484222e+03, 1.04827301e+03,
       1.04930702e+03, 1.04984818e+03, 1.05006532e+03, 1.05492975e+03,
       1.05522099e+03, 1.05533193e+03, 1.05605106e+03, 1.05606722e+03,
       1.05623660e+03, 1.05709584e+03, 1.05841013e+03, 1.05871939e+03,
       1.06018710e+03, 1.06020592e+03, 1.06058950e+03, 1.06080398e+03,
       1.06157440e+03, 1.06339423e+03, 1.06447655e+03, 1.06509427e+03,
       1.06585276e+03, 1.06618714e+03, 1.06646254e+03, 1.06760357e+03,
       1.06984895e+03, 1.07110159e+03, 1.07192043e+03, 1.07227561e+03,
       1.07411879e+03, 1.07497846e+03, 1.07871302e+03, 1.07872315e+03,
       1.07915033e+03, 1.08001637e+03, 1.08358832e+03, 1.08418638e+03,
       1.08539257e+03, 1.08655363e+03, 1.08657275e+03, 1.08900000e+03])
data_dic = {'zpicks':zpicks}

# LCDM mag and da.
names = ['Mcorr', 'matter']
values = np.array([-19.3, 0.3])
mmag, mda = datasim.magn(names, values, data_dic, 'LCDM', plot_key=False)

# Adding noise to LCDM mag and da.
mag_mu, mag_sd = 0.0, 0.2
nmag = datasim.gnoise(mmag, mag_mu, mag_sd)

test_key = 'exotic'

## Does test_key reduce to LCDM?
#names = ['Mcorr','matter', 'radiation', 'a_ombar', 'b_ombar', 'c_ombar',
#         'v_in', 'w_in', 'x_in', 'y_in', 'z_in']
#values = np.array([-19.3, 0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
#mag0, da0 = datasim.magn(names, values, data_dic, test_key, plot_key=False)

## Model for test_key with fluids but no interaction.
#if test_key == 'waterfall':
#    names = ['Mcorr',
#             'matter', 'radiation', 'a_ombar', 'b_ombar', 'c_ombar',
#             'v_in', 'w_in', 'x_in', 'y_in', 'z_in']
#    values = np.array([-19.3,
#                       0.3, 0.025, 0.1, 0.1, 0.1,
#                       0.0, 0.0, 0.0, 0.0, 0.0])
#elif test_key == 'stepfall':
#    names = ['Mcorr', 'matter', 'radiation', 'a_ombar',
#             'v_in', 'w_in', 'x_in']
#    values = np.array([-19.3, 0.3, 0.025, 0.1, 0.0, 0.0, 0.0])
#elif test_key == 'exotic':
#    names = ['Mcorr', 'matter', 'radiation', 'gamma', 'zeta']
#    values = np.array([-19.3, 0.3, 0.025, 0.0, 0.0])
#mag1, da1 = datasim.magn(names, values, data_dic, test_key, plot_key=False)

# Sampler from chosen test_key run.
# sd 0.07

from pathlib import Path

all_model_da_list = []
models = 'waterfall', 'stepfall', 'LCDM', 'exotic'
for test_key in models:
    file_path = 'results_emcee/long/0.07_'+test_key+'/sampler.p'
    my_file = Path(file_path)
    if my_file.is_file():
        with open(file_path,'rb') as rfp:
            sampler007 = pickle.load(rfp)
    flatlnprobability007 = sampler007.flatlnprobability
    transposed_flatchain = sampler007.flatchain.transpose()
    flat_sorted007 = np.vstack([transposed_flatchain, flatlnprobability007])
    flat_sorted007.sort(axis=-1)

    da_list = []

    for i in range(0, len(sampler007.flatchain), 500):
        values = sampler007.flatchain[i, :]
        mag, da = datasim.magn(names, values, data_dic, test_key, plot_key=False)
        da_list.append(da[-1])
    all_model_da_list.append(da_list)

colours = 'red', 'green', 'blue', 'black'

plt.figure()
plt.title(f'Angular diameter distances at z = {zpicks[-1]}')#, model: {models[i]}')
plt.ylabel('$(H_0 /c) * D_A$')
plt.xlabel('z')
plt.grid(True)
plt.ylim(0.0015,0.007)
for i in range(len(models)):
    da_list = all_model_da_list[i]
    for da in da_list:
        plt.scatter(1089, da, s=40, facecolors='none', edgecolors=colours[i])
    plt.scatter(1089, da, s=40, facecolors='none', edgecolors=colours[i], label=models[i])
#    if legend is not None:
#        remove.legend
plt.legend()

plt.figure()
plt.title(f'Histogram of angular diameter distances at z = {zpicks[-1]}')#, model: {models[i]}')
plt.xlabel('$(H_0 /c) * D_A$')
plt.grid(True)
plt.ylim(0.0015,0.007)
for i in range(len(models)):
    da_list = all_model_da_list[i]
    plt.hist(da_list, histtype='step', stacked=True, fill=False)


## Mag from parameters with max likelihood.
#bi_007 = np.argmax(sampler007.flatlnprobability)
#values = sampler007.flatchain[bi_007,:]
#mag_max_007, da_max_007 = datasim.magn(names, values, data_dic, test_key, plot_key=False)
#
## Mag from parameters with 2nd highest likelihood.
#values = flat_sorted007[2,:]
#mag_2max_007, da_2max_007 = datasim.magn(names, values, data_dic, test_key, plot_key=False)
#
### Mag from parameters with lowest likelihood.
##values = flat_sorted007[-1,:]
##mag_min_007, da_min_007 = datasim.magn(names, values, data_dic, test_key, plot_key=False)

## sd 0.2
#with open('results_emcee/long/0.2_'+test_key+'/sampler.p','rb') as rfp:
#    sampler02 = pickle.load(rfp)
#
#flatlnprobability02 = sampler02.flatlnprobability
#transposed_flatchain = sampler02.flatchain.transpose()
#flat_sorted02 = np.vstack([transposed_flatchain, flatlnprobability02])
#flat_sorted02.sort(axis=-1)
#
#da_list = []
#for i in range(len(sampler02.flatchain)):
#    values = sampler02.flatchain[i, :]
#    mag, da = datasim.magn(names, values, data_dic, test_key, plot_key=False)
#    da_list.append(da)
#
#plt.figure()
#plt.title('Angular diameter distances')
#plt.ylabel('$(H_0 /c) * D_A$')
#plt.xlabel('z')
#for da in da_list:
#    plt.plot(zpicks, da, color='red')
#plt.grid(True)
#plt.legend()

## Mag from parameters with max likelihood.
#bi_02 = np.argmax(sampler02.flatlnprobability)
#values = sampler02.flatchain[bi_02,:]
#mag_max_02, da_max_02 = datasim.magn(names, values, data_dic, test_key, plot_key=False)
#
## Mag from parameters with 2nd highest likelihood.
#values = flat_sorted02[2,:]
#mag_2max_02, da_2max_02 = datasim.magn(names, values, data_dic, test_key, plot_key=False)
#
### Mag from parameters with lowest likelihood.
##values = flat_sorted02[-1,:]
##mag_min_02, da_min_02 = datasim.magn(names, values, data_dic, test_key, plot_key=False)
#
#
## SN Ia plots:
#plt.figure()
#plt.title('SN Ia magnitudes '+'\n Noise parameters: $\mu =$ %s, $\sigma =$ %s'%(mag_mu, mag_sd))
#plt.xlabel('z')
##plt.scatter(zpicks, pmag, label='pantheon', marker=',', s=1)
#plt.scatter(zpicks, nmag, label='noisy LCDM', marker=',', s=1)
#plt.plot(zpicks, mmag, label='LCDM', color='red')
##plt.plot(zpicks, mag0, label=test_key+' in LCDM mode')
##plt.plot(zpicks, mag1, label=test_key+' w no interaction')
#plt.plot(zpicks, mag_max_007, label= test_key+' max likelihood, $\sigma = 0.07$')
#plt.plot(zpicks, mag_max_02, label= test_key+' max likelihood, $\sigma = 0.2$')
##plt.plot(zpicks, mag_2max_007, label= test_key+' 2nd highest likelihood, $\sigma = 0.07$')
##plt.plot(zpicks, mag_2max_02, label= test_key+' 2nd highest likelihood, $\sigma = 0.2$')
##plt.plot(zpicks, mag_min_007, label= test_key+' lowest likelihood, $\sigma = 0.07$')
##plt.plot(zpicks, mag_min_02, label= test_key+' lowest likelihood, $\sigma = 0.2$')
#plt.grid(True)
#plt.legend()
#
##m_p_diff = pmag - mmag                          # pantheon - LCDM
#nmag_diff = nmag - mmag                         # noisy LCDM - LCDM
#mbest_diff_007 = mmag - mag_max_007             # LCDM - max like sd=0.07
#msecond_best_diff_007 = mmag - mag_2max_007     # LCDM - 2 highest like sd=0.07
##mworst_diff_007 = mmag - mag_min_007            # LCDM - lowest like sd=0.07
#mbest_diff_02 = mmag - mag_max_02               # LCDM - max like sd=0.2
#msecond_best_diff_02 = mmag - mag_2max_02       # LCDM - 2 highest like sd=0.2
##mworst_diff_02 = mmag - mag_min_02              # LCDM - lowest like sd=0.2
#
## Residuals:
#plt.figure()
#plt.title('SN Ia magnitude residuals')
#plt.ylabel('Mag')
#plt.xlabel('z')
##plt.scatter(zpicks, m_p_diff, label='pantheon SN Ia data-LCDM', marker=',', s=1)
#plt.scatter(zpicks, nmag_diff, label='noisy LCDM data-LCDM', marker=',', s=1)
#plt.plot(zpicks, mbest_diff_007, label='LCDM - max likelihood, $\sigma = 0.07$')
##plt.plot(zpicks, msecond_best_diff_007, label='LCDM - 2nd highest likelihood, $\sigma = 0.07$')
##plt.plot(zpicks, mworst_diff_007, label='LCDM - lowest likelihood, $\sigma = 0.07$')
#plt.plot(zpicks, mbest_diff_02, label='LCDM - max likelihood, $\sigma = 0.2$')
##plt.plot(zpicks, msecond_best_diff_02, label='LCDM - 2nd highest likelihood, $\sigma = 0.2$')
##plt.plot(zpicks, mworst_diff_02, label='LCDM - lowest likelihood, $\sigma = 0.2$')
#plt.grid(True)
#plt.legend()
#
#
#
#
#
## Angular diameter distance plots:
#plt.figure()
#plt.title('Angular diameter distances')
#plt.ylabel('$(H_0 /c) * D_A$')
#plt.xlabel('z')
#plt.plot(zpicks, mda, label='LCDM', color='red')
##plt.plot(zpicks, da0, label=test_key+' in LCDM mode')
##plt.plot(zpicks, da1, label=test_key+' w no interaction')
#plt.plot(zpicks, da_max_007, label= test_key+' max likelihood, $\sigma = 0.07$')
#plt.plot(zpicks, da_max_02, label= test_key+' max likelihood, $\sigma = 0.2$')
##plt.plot(zpicks, da_2max_007, label= test_key+' 2nd highest likelihood, $\sigma = 0.07$')
##plt.plot(zpicks, da_2max_02, label= test_key+' 2nd highest likelihood, $\sigma = 0.2$')
##plt.plot(zpicks, da_min_007, label= test_key+' lowest likelihood, $\sigma = 0.07$')
##plt.plot(zpicks, da_min_02, label= test_key+' lowest likelihood, $\sigma = 0.2$')
#plt.grid(True)
#plt.legend()
#
#dabest_diff_007 = mda - da_max_007             # LCDM - max like sd=0.07
#dasecond_best_diff_007 = mda - da_2max_007     # LCDM - 2 highest like sd=0.07
##daworst_diff_007 = mda - da_min_007            # LCDM - lowest like sd=0.07
#dabest_diff_02 = mda - da_max_02               # LCDM - max like sd=0.2
#dasecond_best_diff_02 = mda - da_2max_02       # LCDM - 2 highest like sd=0.2
##daworst_diff_02 = mda - da_min_02              # LCDM - lowest like sd=0.2
#
## Residuals:
#plt.figure()
#plt.title('Angular diameter distance residuals')
#plt.ylabel('$(H_0 /c) * D_A$')
#plt.xlabel('z')
#plt.plot(zpicks, dabest_diff_007, label='LCDM - max likelihood, $\sigma = 0.07$')
##plt.plot(zpicks, dasecond_best_diff_007, label='LCDM - 2nd highest likelihood, $\sigma = 0.07$')
##plt.plot(zpicks, daworst_diff_007, label='LCDM - lowest likelihood, $\sigma = 0.07$')
#plt.plot(zpicks, dabest_diff_02, label='LCDM - max likelihood, $\sigma = 0.2$')
##plt.plot(zpicks, dasecond_best_diff_02, label='LCDM - 2nd highest likelihood, $\sigma = 0.2$')
##plt.plot(zpicks, daworst_diff_02, label='LCDM - lowest likelihood, $\sigma = 0.2$')
#plt.grid(True)
#plt.legend()


plt.show()